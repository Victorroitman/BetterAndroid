import{_ as l,r as t,o as p,c,a as s,b as n,d as a,e as o}from"./app-ltPCiGOj.js";const i={},r=o(`<h1 id="system-extension" tabindex="-1"><a class="header-anchor" href="#system-extension" aria-hidden="true">#</a> system-extension</h1><p><img src="https://img.shields.io/maven-central/v/com.highcapable.betterandroid/system-extension?logo=apachemaven&amp;logoColor=orange" alt="Maven Central"><span style="margin-left:5px;"></span><img src="https://img.shields.io/badge/Min SDK-21-orange?logo=android" alt="Android Min SDK"></p><p>这是针对系统层相关功能扩展的一个依赖。</p><h2 id="配置依赖" tabindex="-1"><a class="header-anchor" href="#配置依赖" aria-hidden="true">#</a> 配置依赖</h2><p>你可以使用如下方式将此模块添加到你的项目中。</p><h3 id="sweetdependency-推荐" tabindex="-1"><a class="header-anchor" href="#sweetdependency-推荐" aria-hidden="true">#</a> SweetDependency (推荐)</h3><p>在你的项目 <code>SweetDependency</code> 配置文件中添加依赖。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#8DDB8C;">libraries</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">com.highcapable.betterandroid</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">system-extension</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">+</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的项目 <code>build.gradle.kts</code> 中配置依赖。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.system.extension)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="传统方式" tabindex="-1"><a class="header-anchor" href="#传统方式" aria-hidden="true">#</a> 传统方式</h3><p>在你的项目 <code>build.gradle.kts</code> 中配置依赖。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:system-extension:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请将 <code>&lt;version&gt;</code> 修改为此文档顶部显示的版本。</p><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍" aria-hidden="true">#</a> 功能介绍</h2>`,15),d={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension",target:"_blank",rel:"noopener noreferrer"},y=s("h3",{id:"application-扩展",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#application-扩展","aria-hidden":"true"},"#"),n(" Application 扩展")],-1),u={class:"custom-container tip"},m=s("p",{class:"custom-container-title"},"本节内容",-1),A={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/-package-info-flags-wrapper",target:"_blank",rel:"noopener noreferrer"},v=s("p",null,[s("code",null,"PackageInfo"),n(" 的 "),s("code",null,"flags"),n(" 属性包装类。")],-1),b={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/-application-info-flags-wrapper",target:"_blank",rel:"noopener noreferrer"},D=s("p",null,[s("code",null,"ApplicationInfo"),n(" 的 "),s("code",null,"flags"),n(" 属性包装类。")],-1),h={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-component-name",target:"_blank",rel:"noopener noreferrer"},B={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/has-package",target:"_blank",rel:"noopener noreferrer"},C={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/has-launch-activity",target:"_blank",rel:"noopener noreferrer"},g={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-package-info",target:"_blank",rel:"noopener noreferrer"},k={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-package-info-or-null",target:"_blank",rel:"noopener noreferrer"},_={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-installed-packages",target:"_blank",rel:"noopener noreferrer"},F={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-installed-packages-or-null",target:"_blank",rel:"noopener noreferrer"},x={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/query-launch-activities-for-package",target:"_blank",rel:"noopener noreferrer"},f={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/query-launch-activities-for-package-or-null",target:"_blank",rel:"noopener noreferrer"},q={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/is-component-enabled",target:"_blank",rel:"noopener noreferrer"},I={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/enable-component",target:"_blank",rel:"noopener noreferrer"},S={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/disable-component",target:"_blank",rel:"noopener noreferrer"},P={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/reset-component",target:"_blank",rel:"noopener noreferrer"},M={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/version-code-compat",target:"_blank",rel:"noopener noreferrer"},O={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/primary-cpu-abi",target:"_blank",rel:"noopener noreferrer"},E={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/secondary-cpu-abi",target:"_blank",rel:"noopener noreferrer"},K={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/has-flags",target:"_blank",rel:"noopener noreferrer"},N=s("p",null,[n("适用于 "),s("code",null,"Application"),n(" 的相关扩展。")],-1),w=o(`<p><code>BetterAndroid</code> 为 <code>PackageManager</code>、<code>PackageInfo</code>、<code>ApplicationInfo</code> 等功能提供了扩展功能，你能够更加方便地使用这些功能。</p><p>它们被统一归类为 Application 扩展，意为应用程序的相关功能。</p><p>下面是这些扩展功能的使用方式及示例。</p><p>通过泛型的方式获取一个组件类的 <code>ComponentName</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 获取 MainActivity 的 ComponentName</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> componentName </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.</span><span style="color:#DCBDFB;">getComponentName</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MainActivity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断应用程序是否已经安装。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 例如，判断 Chrome 是否已经安装</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> hasChrome </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">hasPackage</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.android.chrome&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断应用程序是否存在可启动的 <code>Activity</code>。</p><p>此功能主要用于判断应用程序是否存在一个能从桌面启动的 <code>Activity</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 例如，判断 com.mydemo.test 应用程序</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> hasLaunchActivity </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">hasLaunchActivity</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.mydemo.test&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>从 Android 10 开始，即使应用程序没有 <code>Activity</code> 声明 <code>ACTION_MAIN</code> 和 <code>CATEGORY_LAUNCHER</code>，其图标也可能会显示在桌面上，点击会打开应用信息界面，但是这并不代表它存在可启动的 <code>Activity</code>。</p></div><p>获取应用程序包信息。</p><p><code>BetterAndroid</code> 为 <code>getPackageInfo</code> 提供了一个完全同名的重载方法，你无需考虑兼容性问题，使用 <code>PackageInfoFlagsWrapper</code> 作为 <code>flags</code> 的参数即可。</p><p>重载这个方法的原因是出自 Android 13 中，官方将 <code>Int</code> 类型 <code>flags</code> 的方法作废并启用了一套新方案，但是并没有提供任何兼容处理工具，后期却又在 Android 14 中取消作废，这会给开发者带来极大的困扰。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 例如，获取 Chrome 的 PackageInfo</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> packageInfo </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">getPackageInfo</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.android.chrome&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 你可以在第二位参数传入一个或多个 PackageInfoFlagsWrapper 对象来设置 flags，而不是位运算的方式</span></span>
<span class="line"><span style="color:#768390;">// PackageInfoFlagsWrapper 是对所有 PackageInfo 的 flags 的一个包装镜像</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> packageInfo </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager</span></span>
<span class="line"><span style="color:#ADBAC7;">    .</span><span style="color:#DCBDFB;">getPackageInfo</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.android.chrome&quot;</span><span style="color:#ADBAC7;">, PackageInfoFlagsWrapper.GET_META_DATA)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>在不确定 <code>PackageInfo</code> 能否获取成功时，你可以将获取的方法替换为 <code>getPackageInfoOrNull</code>，这样在获取失败时将会返回 <code>null</code> 而不是抛出异常。</p></div><p>获取已安装的应用程序包信息列表。</p><p><code>BetterAndroid</code> 同样为 <code>getInstalledPackages</code> 提供了一个完全同名的重载方法，你无需考虑兼容性问题，使用 <code>PackageInfoFlagsWrapper</code> 作为 <code>flags</code> 的参数即可。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 获取所有已安装的应用程序包信息列表</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> packageInfos </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">getInstalledPackages</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 同样地，你可以在第二位参数传入一个或多个 PackageInfoFlagsWrapper 对象来设置 flags</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> packageInfos </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">getInstalledPackages</span><span style="color:#ADBAC7;">(PackageInfoFlagsWrapper.GET_META_DATA)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>同样地，在不确定 <code>PackageInfo</code> 能否获取成功时，你可以将获取的方法替换为 <code>getInstalledPackagesOrNull</code>。</p></div><p>查询应用程序的所有可启动 <code>Activity</code>。</p><p>此方法基于 <code>queryIntentActivities</code> 和 <code>getLaunchIntentForPackage</code> 实现，简化了获取过程。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 例如，查询 Chrome 的所有可启动 Activity</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> launchActivities </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">queryLaunchActivitiesForPackage</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.android.chrome&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>同样地，在不确定 <code>ResolveInfo</code> 能否获取成功时，你可以将获取的方法替换为 <code>queryLaunchActivitiesForPackageOrNull</code>。</p></div><p>判断应用程序声明的组件是否启用或处于默认状态。</p><p><code>BetterAndroid</code> 封装了 <code>getComponentEnabledSetting</code> 方法，你可以使用以下方法来更快地对组件状态做出判断。</p><p>默认状态为应用程序自身在 <code>AndroidManifest.xml</code> 中声明的状态，如果没有声明则为启用状态。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 获取 MainActivity 的 ComponentName</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> mainComponent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.</span><span style="color:#DCBDFB;">getComponentName</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MainActivity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// 判断 MainActivity 是否启用</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isEnabled </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">isComponentEnabled</span><span style="color:#ADBAC7;">(mainComponent)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启用、禁用或重置应用程序声明的组件。</p><p><code>BetterAndroid</code> 封装了 <code>setComponentEnabledSetting</code> 方法，你可以使用以下方法来更快地完成这个操作。</p><p>重置操作将会重置为默认状态，即应用程序自身在 <code>AndroidManifest.xml</code> 中声明的状态，如果没有声明则为启用状态。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 获取 MainActivity 的 ComponentName</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> mainComponent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.</span><span style="color:#DCBDFB;">getComponentName</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MainActivity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// 启用 MainActivity</span></span>
<span class="line"><span style="color:#ADBAC7;">context.packageManager.</span><span style="color:#DCBDFB;">enableComponent</span><span style="color:#ADBAC7;">(mainComponent)</span></span>
<span class="line"><span style="color:#768390;">// 禁用 MainActivity</span></span>
<span class="line"><span style="color:#ADBAC7;">context.packageManager.</span><span style="color:#DCBDFB;">disableComponent</span><span style="color:#ADBAC7;">(mainComponent)</span></span>
<span class="line"><span style="color:#768390;">// 重置 MainActivity</span></span>
<span class="line"><span style="color:#ADBAC7;">context.packageManager.</span><span style="color:#DCBDFB;">resetComponent</span><span style="color:#ADBAC7;">(mainComponent)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">特别注意</p><p>你的应用程序除非处于系统用户组，否则没有权限启用或禁用其它应用程序的组件。</p></div><p>获取应用程序的版本号 (Version Code)。</p><p><code>longVersionCode</code> 是 Android 9 中引入的新功能，它是 <code>versionCode</code> 的扩容版本，用于解决 <code>versionCode</code> 位数不足的问题。</p><p>由于 <code>versionCode</code> 已被标记为作废状态，且开发者使用 <code>androidx</code> 提供的 <code>PackageInfoCompat.getLongVersionCode</code> 显得过于繁琐，这个方法也基本上不好找到，两个版本号的使用方法同时存在也会给开发者带来困扰。</p><p>出于此目的，<code>BetterAndroid</code> 封装了关于版本号的兼容实现，你现在无需考虑 <code>versionCode</code> 和 <code>longVersionCode</code>，你可以直接使用 <code>versionCodeCompat</code> 来获取应用程序的版本号，它的类型将始终保持为 <code>Long</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 例如，获取 Chrome 的版本号</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> versionCode </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">getPackageInfo</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.android.chrome&quot;</span><span style="color:#ADBAC7;">).versionCodeCompat</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取应用程序的 CPU ABI 名称。</p><p>这是一个隐藏的 API，所以 <code>BetterAndroid</code> 通过反射的方式进行获取，你可能会在某些特定的场景中需要使用它。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 例如，获取 Chrome 的 PackageInfo</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> packageInfo </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">getPackageInfo</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.android.chrome&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 获取主 CPU ABI 名称</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> primaryCpuAbi </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> packageInfo.applicationInfo.primaryCpuAbi</span></span>
<span class="line"><span style="color:#768390;">// 获取次 CPU ABI 名称</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> secondaryCpuAbi </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> packageInfo.applicationInfo.secondaryCpuAbi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断 <code>ApplicationInfo</code> 是否包含指定的 <code>flags</code>。</p><p><code>BetterAndroid</code> 封装了通过位运算的方式判断 <code>flags</code> 的方法，你可以使用以下方法来更快地完成这个操作。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 例如，获取 Chrome 的 ApplicationInfo</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> applicationInfo </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">getPackageInfo</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.android.chrome&quot;</span><span style="color:#ADBAC7;">).applicationInfo</span></span>
<span class="line"><span style="color:#768390;">// 判断 Chrome 是否是系统应用</span></span>
<span class="line"><span style="color:#768390;">// 你可以传入一个或多个 ApplicationInfoFlagsWrapper 对象来设置 flags，而不是位运算的方式</span></span>
<span class="line"><span style="color:#768390;">// ApplicationInfoFlagsWrapper 是对所有 ApplicationInfo 的 flags 的一个包装镜像</span></span>
<span class="line"><span style="color:#768390;">// 为了便于阅读，所有的 flags 在 ApplicationInfoFlagsWrapper 中都移除了 FLAG 前缀</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isSystemApp </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> applicationInfo.</span><span style="color:#DCBDFB;">hasFlags</span><span style="color:#ADBAC7;">(ApplicationInfoFlagsWrapper.SYSTEM)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),R={class:"custom-container warning"},V=s("p",{class:"custom-container-title"},"注意",-1),L=s("p",null,[n("在上述所有功能中，如果涉及查询自身应用程序以外的软件包行为时，在 Android 11 及之后需要 "),s("code",null,"QUERY_ALL_PACKAGES"),n(" 权限或明确配置一个 "),s("code",null,"queries"),n(" 属性列表。")],-1),T={href:"https://developer.android.com/training/package-visibility",target:"_blank",rel:"noopener noreferrer"},U=s("h3",{id:"广播-broadcast-扩展",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#广播-broadcast-扩展","aria-hidden":"true"},"#"),n(" 广播 (Broadcast) 扩展")],-1),W={class:"custom-container tip"},H=s("p",{class:"custom-container-title"},"本节内容",-1),z={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/register-receiver",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/send-broadcast",target:"_blank",rel:"noopener noreferrer"},G=s("p",null,"适用于广播 (Broadcast) 的相关扩展。",-1),Y=o(`<p>广播 (Broadcast) 是 Android 系统中非常重要的一个功能，它能够让应用程序之间进行通信。</p><p><code>BetterAndroid</code> 为广播 (Broadcast) 提供了一个在运行时动态注册的解决方案，你能更简单地发送广播和创建 <code>BoardcastReceiver</code>。</p><p>你可以使用以下方式发送、接收无序广播而无需在 <code>AndroidManifest.xml</code> 中声明。</p><p>例如，我们要给 <code>com.example.app</code> 发送一个广播。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 发送无序广播给 com.example.app</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">sendBroadcast</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.example.app&quot;</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置 Action</span></span>
<span class="line"><span style="color:#ADBAC7;">    action </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;com.example.app.action.KNOCK&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 传递一个字符串参数</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">putExtra</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;greetings&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;Hey you!&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 你可以不指定接收者的包名，</span></span>
<span class="line"><span style="color:#768390;">// 这样将会被所有添加了以下 Action 的接收器接收</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">sendBroadcast</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置 Action</span></span>
<span class="line"><span style="color:#ADBAC7;">    action </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;com.example.app.action.KNOCK&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 传递一个字符串参数</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">putExtra</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;greetings&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;Hey there!&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>com.example.app</code> 中，我们可以这样来接收这个广播。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 创建意图过滤器</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> filter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">IntentFilter</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">apply</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 指定发送者的 Action</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">addAction</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.example.app.action.KNOCK&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 注册广播接收器</span></span>
<span class="line"><span style="color:#768390;">// 这里的回调为 onReceive 方法，是同步的 (主线程)</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">registerReceiver</span><span style="color:#ADBAC7;">(filter) { context, intent </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 获取传递的字符串参数</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> greetings </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> intent.</span><span style="color:#DCBDFB;">getStringExtra</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;greetings&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 使用 Toast 展示接收到的参数</span></span>
<span class="line"><span style="color:#ADBAC7;">    context.</span><span style="color:#DCBDFB;">toast</span><span style="color:#ADBAC7;">(greetings)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>你可以在 <code>registerReceiver</code> 方法中设置 <code>exported</code> 参数 (默认为 <code>true</code>) 决定当前广播接收器是否需要添加 <code>Context.RECEIVER_EXPORTED</code>，如果你的广播不对外开放，你可以将其设置为 <code>false</code>。</p></div>`,10),Z={class:"custom-container warning"},j=s("p",{class:"custom-container-title"},"注意",-1),X=s("p",null,[n("在 Android 14 或更高版本中，运行时注册的广播接收器必须明确导出行为才能接收来自另一个应用程序的广播，如果当前目标 Android 版本为 14 及以上， 你必须确保 "),s("code",null,"exported"),n(" 参数为 "),s("code",null,"true"),n(" 才能接收来自另一个应用程序的广播，否则会直接抛出异常。")],-1),J={href:"https://developer.android.com/about/versions/14/behavior-changes-14#runtime-receivers-exported",target:"_blank",rel:"noopener noreferrer"},$=s("h3",{id:"剪贴板-clipboard-扩展",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#剪贴板-clipboard-扩展","aria-hidden":"true"},"#"),n(" 剪贴板 (Clipboard) 扩展")],-1),ss={class:"custom-container tip"},ns=s("p",{class:"custom-container-title"},"本节内容",-1),es={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/-clip-data-item-builder",target:"_blank",rel:"noopener noreferrer"},as=s("p",null,[s("code",null,"ClipData.Item"),n(" 构建器。")],-1),os={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/clipboard-manager",target:"_blank",rel:"noopener noreferrer"},ls={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/copy",target:"_blank",rel:"noopener noreferrer"},ts={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/list-of-items",target:"_blank",rel:"noopener noreferrer"},ps={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/-clip-data",target:"_blank",rel:"noopener noreferrer"},cs=s("p",null,"适用于剪贴板 (Clipboard) 的相关扩展。",-1),is=o(`<p>剪贴板是在应用程序开发中经常会用到的且非常重要的一个功能，但是它的使用方式不是很友好。</p><p>你需要使用 <code>getSystemService</code> 获取 <code>ClipboardManager</code>，然后再使用 <code>setPrimaryClip</code> 设置剪贴板内容，当然你也可以使用 <code>getPrimaryClip</code> 读取剪贴板内容。</p><p>有时候我们只需要设置或读取一个字符串，但是这些操作却需要写很多代码，这对于开发者来说是非常不友好的。</p><p>为此 <code>BetterAndroid</code> 为剪贴板 (Clipboard) 提供了一个更简单的解决方案，你可以直接使用以下方法来设置或读取剪贴板内容。</p><p>读取剪贴板中的内容。</p><p>现在，你可以直接将 <code>ClipData.getItemAt</code> 和 <code>ClipData.getItemCount</code> 替换为 <code>ClipData.listOfItems</code>。</p><p>这个方法将会返回一个 <code>List&lt;ClipData.Item&gt;</code>，你可以使用 <code>firstOrNull</code> 来获取第一个 <code>ClipData.Item</code>，或者使用 <code>isEmpty</code> 来直接判断剪贴板中是否存在内容，它的好处就是不再需要去考虑数组是不是会越界的问题。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 获取剪贴板管理器</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> manager </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.clipboardManager</span></span>
<span class="line"><span style="color:#768390;">// 获取剪贴板中第一个 ClipData.Item</span></span>
<span class="line"><span style="color:#768390;">// 通常情况下，你只需要获取第一个对象即可</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> clipItem </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> manager.primaryClip?.</span><span style="color:#DCBDFB;">listOfItems</span><span style="color:#ADBAC7;">()?.</span><span style="color:#DCBDFB;">firstOrNull</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 获取已复制的文本</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> copiedText </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> clipItem?.text</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复制一条文本到剪贴板。</p><p>你不需要再去写 <code>setPrimaryClip(ClipData.newPlainText(&quot;Lable&quot;, &quot;Text&quot;))</code>，复制一条文本就应该简简单单。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 复制一条文本到剪贴板</span></span>
<span class="line"><span style="color:#ADBAC7;">context.clipboardManager.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 为这个文本添加一个标签</span></span>
<span class="line"><span style="color:#ADBAC7;">context.clipboardManager.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;MyText&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复制 HTML 类型的文本、<code>Uri</code>、<code>Intent</code> 到剪贴板。</p><p>无论复制什么内容，你都可以使用 <code>copy</code> 方法来完成。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 复制 HTML 类型的文本到剪贴板</span></span>
<span class="line"><span style="color:#ADBAC7;">context.clipboardManager.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;&lt;b&gt;Hello World!&lt;/b&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 复制 Uri 到剪贴板</span></span>
<span class="line"><span style="color:#ADBAC7;">context.clipboardManager.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(Uri.</span><span style="color:#DCBDFB;">parse</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;some://uri&quot;</span><span style="color:#ADBAC7;">), context.contentResolver)</span></span>
<span class="line"><span style="color:#768390;">// 复制 Intent 到剪贴板</span></span>
<span class="line"><span style="color:#ADBAC7;">context.clipboardManager.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">Intent</span><span style="color:#ADBAC7;">(Intent.ACTION_VIEW, Uri.</span><span style="color:#DCBDFB;">parse</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;some://uri&quot;</span><span style="color:#ADBAC7;">)))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复制自定义的 <code>ClipData</code> 内容到剪贴板。</p><p>你可以使用 <code>ClipData</code> 方法创建一个新的 <code>ClipData</code> 对象，然后复制到剪贴板。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 创建 ClipData 对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> clipData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ClipData</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">addText</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">addHtmlText</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;&lt;b&gt;Hello World!&lt;/b&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">addUri</span><span style="color:#ADBAC7;">(Uri.</span><span style="color:#DCBDFB;">parse</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;some://uri&quot;</span><span style="color:#ADBAC7;">), context.contentResolver)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">addIntent</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">Intent</span><span style="color:#ADBAC7;">(Intent.ACTION_VIEW, Uri.</span><span style="color:#DCBDFB;">parse</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;some://uri&quot;</span><span style="color:#ADBAC7;">)))</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 复制到剪贴板</span></span>
<span class="line"><span style="color:#ADBAC7;">context.clipboardManager.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(clipData)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),rs={class:"custom-container warning"},ds=s("p",{class:"custom-container-title"},"注意",-1),ys=s("p",null,"在 Android 10 或更高版本中，当应用程序处于后台时，除非你的应用程序是输入法 (IME)，否则无法读取剪贴板中的内容。",-1),us={href:"https://developer.android.com/about/versions/10/privacy/changes#clipboard-data",target:"_blank",rel:"noopener noreferrer"},ms=s("h3",{id:"意图-intent-扩展",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#意图-intent-扩展","aria-hidden":"true"},"#"),n(" 意图 (Intent) 扩展")],-1),As={class:"custom-container tip"},vs=s("p",{class:"custom-container-title"},"本节内容",-1),bs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-serializable-extra-compat",target:"_blank",rel:"noopener noreferrer"},Ds={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-serializable-compat",target:"_blank",rel:"noopener noreferrer"},hs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-parcelable-extra-compat",target:"_blank",rel:"noopener noreferrer"},Bs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-parcelable-compat",target:"_blank",rel:"noopener noreferrer"},Cs=s("p",null,[n("适用于 "),s("code",null,"Intent"),n(" 的相关扩展。")],-1),gs=o(`<p>目前，<code>Intent</code> 中的扩展方法仅用于处理 <code>Serializable</code> 和 <code>Parcelable</code> 类型的获取方法在 Android 13 中被标记为作废且官方未提供任何有效的兼容处理方式问题。</p><p>你可以使用 <code>BetterAndroid</code> 提供的兼容性处理方法来获取 <code>Serializable</code> 和 <code>Parcelable</code> 类型的数据。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Intent</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> intent: </span><span style="color:#F69D50;">Intent</span></span>
<span class="line"><span style="color:#768390;">// 获取 Serializable 类型的数据</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> myData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> intent.</span><span style="color:#DCBDFB;">getSerializableExtraCompat</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyData</span><span style="color:#ADBAC7;">&gt;(</span><span style="color:#96D0FF;">&quot;my_key_name&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> myData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> intent.extras?.</span><span style="color:#DCBDFB;">getSerializableCompat</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyData</span><span style="color:#ADBAC7;">&gt;(</span><span style="color:#96D0FF;">&quot;my_key_name&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 获取 Parcelable 类型的数据</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> myData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> intent.</span><span style="color:#DCBDFB;">getParcelableExtraCompat</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyData</span><span style="color:#ADBAC7;">&gt;(</span><span style="color:#96D0FF;">&quot;my_key_name&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> myData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> intent.extras?.</span><span style="color:#DCBDFB;">getParcelableCompat</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyData</span><span style="color:#ADBAC7;">&gt;(</span><span style="color:#96D0FF;">&quot;my_key_name&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是原始方法与兼容性处理方法的对照表。</p><table><thead><tr><th>原始方法</th><th>兼容性处理方法</th></tr></thead><tbody><tr><td><code>Intent.getSerializableExtra</code></td><td><code>Intent.getSerializableExtraCompat</code></td></tr><tr><td><code>Bundle.getSerializable</code></td><td><code>Bundle.getSerializableCompat</code></td></tr><tr><td><code>Intent.getParcelableExtra</code></td><td><code>Intent.getParcelableExtraCompat</code></td></tr><tr><td><code>Bundle.getParcelable</code></td><td><code>Bundle.getParcelableCompat</code></td></tr></tbody></table><h3 id="服务-service-扩展" tabindex="-1"><a class="header-anchor" href="#服务-service-扩展" aria-hidden="true">#</a> 服务 (Service) 扩展</h3>`,7),ks={class:"custom-container tip"},_s=s("p",{class:"custom-container-title"},"本节内容",-1),Fs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/start-service",target:"_blank",rel:"noopener noreferrer"},xs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/start-foreground-service",target:"_blank",rel:"noopener noreferrer"},fs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/start-service-or-else",target:"_blank",rel:"noopener noreferrer"},qs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/start-foreground-service-or-else",target:"_blank",rel:"noopener noreferrer"},Is=s("p",null,[n("适用于 "),s("code",null,"Service"),n(" 的相关扩展。")],-1),Ss=o(`<p>与启动 <code>Activity</code> 的方式类似，我们需要启动一个 <code>Service</code> 时，需要使用 <code>Intent</code> 创建一个 <code>Intent(this, MyService::class.java)</code>，然后调用 <code>startService(intent)</code> 来启动。</p><p>这样写起来大概不太友好，于是 <code>BetterAndroid</code> 为 <code>Service</code> 提供了扩展，现在你可以直接使用以下方式来启动一个 <code>Service</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 假设 MyService 就是你的目标 Service</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">startService</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyService</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// 你可以使用以下方式创建一个 Intent 对象</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">startService</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyService</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 在这里添加一些额外的参数</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">putExtra</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;key&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;value&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你需要启动一个外部应用程序的 <code>Service</code>，你可以使用以下方式。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 假设你需要启动的应用程序包名为 com.example.app</span></span>
<span class="line"><span style="color:#768390;">// 假设你需要启动的 Service 类名为 com.example.app.MyService</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">startService</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.example.app&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;com.example.app.MyService&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 你依然可以使用以下方式创建一个 Intent 对象</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">startService</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.example.app&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;com.example.app.MyService&quot;</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 在这里添加一些额外的参数</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">putExtra</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;key&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;value&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>你可以使用 <code>startServiceOrElse</code> 及 <code>startForegroundServiceOrElse</code> 来代替 <code>startService</code> 及 <code>startForegroundService</code> 以判断 <code>Service</code> 是否能够启动成功，启动失败时此方法不会抛出异常，而是返回 <code>false</code>。</p></div>`,8),Ps={class:"custom-container warning"},Ms=s("p",{class:"custom-container-title"},"注意",-1),Os=s("p",null,[n("在 Android 8 或更高版本中，在一些情况下，你可能需要使用 "),s("code",null,"startForegroundService"),n(" 来启动一个前台服务。")],-1),Es={href:"https://developer.android.com/about/versions/oreo/background",target:"_blank",rel:"noopener noreferrer"},Ks=s("h3",{id:"系统信息",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#系统信息","aria-hidden":"true"},"#"),n(" 系统信息")],-1),Ns={class:"custom-container tip"},ws=s("p",{class:"custom-container-title"},"本节内容",-1),Rs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.tool/-system-version",target:"_blank",rel:"noopener noreferrer"},Vs=s("p",null,"系统版本工具。",-1),Ls={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.tool/-system-kind",target:"_blank",rel:"noopener noreferrer"},Ts=s("p",null,"系统种类工具。",-1),Us={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.tool/-system-properties",target:"_blank",rel:"noopener noreferrer"},Ws=s("p",null,[n("Android 的 "),s("code",null,"SystemProperties"),n(" 工具。")],-1),Hs=o(`<p>也许你已经厌烦了代码中漂流各地的 <code>Build.VERSION.SDK_INT</code>、<code>Build.VERSION_CODES</code>，那么从现在开始，你不再需要使用它们了。</p><p><code>BetterAndroid</code> 为你准备了更加简便的写法来取代它们。</p><p>在之前，我们需要判断当前系统的 API Level (Android API 等级)，基本上都会通过以下方式进行。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (Build.VERSION.SDK_INT </span><span style="color:#F47067;">&gt;=</span><span style="color:#ADBAC7;"> Build.VERSION_CODES.Q) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 执行相关代码</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 或者使用硬编码 API 版本号的方式</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (Build.VERSION.SDK_INT </span><span style="color:#F47067;">&gt;=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">29</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 执行相关代码</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，你可以通过以下方式非常简单地完成这个操作。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">SystemVersion.</span><span style="color:#DCBDFB;">require</span><span style="color:#ADBAC7;">(SystemVersion.Q) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 执行相关代码</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 或者使用硬编码 API 版本号的方式</span></span>
<span class="line"><span style="color:#ADBAC7;">SystemVersion.</span><span style="color:#DCBDFB;">require</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">29</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 执行相关代码</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// result 在 API 大于等于 29 时将会得到 &quot;target&quot;，否则为 &quot;legacy&quot;</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> result </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SystemVersion.</span><span style="color:#DCBDFB;">require</span><span style="color:#ADBAC7;">(SystemVersion.Q, </span><span style="color:#96D0FF;">&quot;legacy&quot;</span><span style="color:#ADBAC7;">) { </span><span style="color:#96D0FF;">&quot;target&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;">// 如果是一个可为 null 的结果，你可以使用以下方式</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> myData: </span><span style="color:#F69D50;">MyData</span><span style="color:#ADBAC7;">?</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> result </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SystemVersion.</span><span style="color:#DCBDFB;">requireOrNull</span><span style="color:#ADBAC7;">(SystemVersion.Q, </span><span style="color:#DCBDFB;">MyData</span><span style="color:#ADBAC7;">()) { myData }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以使用以下方式进行判断。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 判断 API 是否小于 29</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (SystemVersion.</span><span style="color:#DCBDFB;">isLowTo</span><span style="color:#ADBAC7;">(SystemVersion.Q)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 执行相关代码</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 判断 API 是否大于 29</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (SystemVersion.</span><span style="color:#DCBDFB;">isHighTo</span><span style="color:#ADBAC7;">(SystemVersion.Q)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 执行相关代码</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 判断 API 是否小于等于 29</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (SystemVersion.</span><span style="color:#DCBDFB;">isLowOrEqualsTo</span><span style="color:#ADBAC7;">(SystemVersion.Q)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 执行相关代码</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 判断 API 是否大于等于 29</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (SystemVersion.</span><span style="color:#DCBDFB;">isHighOrEqualsTo</span><span style="color:#ADBAC7;">(SystemVersion.Q)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 执行相关代码</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 判断 API 在 26 与 29 之间</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (SystemVersion.</span><span style="color:#DCBDFB;">isBetween</span><span style="color:#ADBAC7;">(SystemVersion.O</span><span style="color:#F47067;">..</span><span style="color:#ADBAC7;">SystemVersion.Q)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 执行相关代码</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是各个 API 的常量映射对照表，在 Android 版本更新后，<code>BetterAndroid</code> 会同步更新这些常量。</p><table><thead><tr><th>API 等级</th><th><code>SystemVersion</code> 名称</th><th><code>Build.VERSION_CODES</code> 名称</th><th>对应系统版本</th></tr></thead><tbody><tr><td>19</td><td><code>K</code></td><td><code>KITKAT</code></td><td>4.4.3、4.4.4</td></tr><tr><td>20</td><td><code>K_W</code></td><td><code>KITKAT_WATCH</code></td><td>4.4W</td></tr><tr><td>21</td><td><code>L</code></td><td><code>LOLLIPOP</code></td><td>5.0、5.0.2</td></tr><tr><td>22</td><td><code>L_MR1</code></td><td><code>LOLLIPOP_MR1</code></td><td>5.1、5.1.1</td></tr><tr><td>23</td><td><code>M</code></td><td><code>M</code></td><td>6.0、6.0.1</td></tr><tr><td>24</td><td><code>N</code></td><td><code>N</code></td><td>7.0</td></tr><tr><td>25</td><td><code>N_MR1</code></td><td><code>N_MR1</code></td><td>7.1、7.1.1、7.1.2</td></tr><tr><td>26</td><td><code>O</code></td><td><code>O</code></td><td>8.0</td></tr><tr><td>27</td><td><code>O_MR1</code></td><td><code>O_MR1</code></td><td>8.1</td></tr><tr><td>28</td><td><code>P</code></td><td><code>P</code></td><td>9</td></tr><tr><td>29</td><td><code>Q</code></td><td><code>Q</code></td><td>10</td></tr><tr><td>30</td><td><code>R</code></td><td><code>R</code></td><td>11</td></tr><tr><td>31</td><td><code>S</code></td><td><code>S</code></td><td>12</td></tr><tr><td>32</td><td><code>S_V2</code></td><td><code>S_V2</code></td><td>12.1、12L</td></tr><tr><td>33</td><td><code>T</code></td><td><code>TIRAMISU</code></td><td>13</td></tr><tr><td>34</td><td><code>U</code></td><td><code>UPSIDE_DOWN_CAKE</code></td><td>14</td></tr></tbody></table><p>除了对 API 等级的判断，你还可以使用以下方式来获取当前 Android 的版本名称。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 获取当前 Android 的版本名称</span></span>
<span class="line"><span style="color:#768390;">// 它的作用等效于 Build.VERSION.RELEASE</span></span>
<span class="line"><span style="color:#768390;">// 例如，Android 10 的版本名称为字符串 &quot;10&quot;</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> versionName </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SystemVersion.name</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随着各个厂商相继发布的自家品牌 Android 手机深度定制的 Android 系统越来越多，有时候我们非常有必要针对各个定制版本系统不同的功能去进行定向适配，但是如何判断这些系统的种类就是一个很大的问题。</p><p>通常情况下大家的解决方案都是去判断设备的型号从而确定是哪种定制系统，但是如果当前设备运行的不是你所判断的那种定制系统，例如用户自行刷机的案例，那么这种方案就会失效。</p><p><code>BetterAndroid</code> 通过收集各种各样常见定制系统的对应特征，为你提供了一个简单、快速、高效的解决方案。</p><p>下面是判断当前系统种类的一个简单示例。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 判断当前系统种类是否为 MIUI</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (SystemKind.</span><span style="color:#DCBDFB;">equals</span><span style="color:#ADBAC7;">(SystemKind.MIUI)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 执行相关代码</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没错，就是这么简单，如果你需要同时判断多个系统种类，你还可以使用以下方式。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 获取当前系统种类</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> kind </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SystemKind.current</span></span>
<span class="line"><span style="color:#768390;">// 批量判断当前系统种类</span></span>
<span class="line"><span style="color:#F47067;">when</span><span style="color:#ADBAC7;"> (kind) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    SystemKind.MIUI </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 执行相关代码</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    SystemKind.COLOROS </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 执行相关代码</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    SystemKind.ORIGINOS </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 执行相关代码</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),zs={href:"https://github.com/BetterAndroid/BetterAndroid/issues",target:"_blank",rel:"noopener noreferrer"},Qs=s("thead",null,[s("tr",null,[s("th",null,[s("code",null,"SystemKind"),n(" 名称")]),s("th",null,"系统种类")])],-1),Gs=s("tr",null,[s("td",null,[s("code",null,"DEFAULT")]),s("td",null,"默认、未分类 (原生或类原生以及当前未收集的系统种类)")],-1),Ys=s("td",null,[s("code",null,"HARMONYOS")],-1),Zs={href:"https://www.harmonyos.com/",target:"_blank",rel:"noopener noreferrer"},js=s("td",null,[s("code",null,"EMUI")],-1),Xs={href:"https://www.huaweicentral.com/emui",target:"_blank",rel:"noopener noreferrer"},Js=s("td",null,[s("code",null,"MIUI")],-1),$s={href:"https://home.miui.com/",target:"_blank",rel:"noopener noreferrer"},sn=s("td",null,[s("code",null,"HYPEROS")],-1),nn={href:"https://hyperos.mi.com/",target:"_blank",rel:"noopener noreferrer"},en=s("td",null,[s("code",null,"COLOROS")],-1),an={href:"https://www.coloros.com/",target:"_blank",rel:"noopener noreferrer"},on=s("td",null,[s("code",null,"FUNTOUCHOS")],-1),ln={href:"https://www.vivo.com/funtouchos",target:"_blank",rel:"noopener noreferrer"},tn=s("td",null,[s("code",null,"ORIGINOS")],-1),pn={href:"https://www.vivo.com/originos",target:"_blank",rel:"noopener noreferrer"},cn=s("td",null,[s("code",null,"FLYME")],-1),rn={href:"https://flyme.com/",target:"_blank",rel:"noopener noreferrer"},dn=s("td",null,[s("code",null,"ONEUI")],-1),yn={href:"https://www.samsung.com/one-ui",target:"_blank",rel:"noopener noreferrer"},un=s("td",null,[s("code",null,"ZUI")],-1),mn={href:"https://zui.com/",target:"_blank",rel:"noopener noreferrer"},An=s("td",null,[s("code",null,"REDMAGICOS")],-1),vn={href:"https://www.nubia.com/",target:"_blank",rel:"noopener noreferrer"},bn=s("td",null,[s("code",null,"NUBIAUI")],-1),Dn={href:"https://www.nubia.com/",target:"_blank",rel:"noopener noreferrer"},hn=s("td",null,[s("code",null,"ROGUI")],-1),Bn={href:"https://www.asus.com/",target:"_blank",rel:"noopener noreferrer"},Cn=s("td",null,[s("code",null,"VISIONOS")],-1),gn={href:"https://fans.hisense.com/forum-269-1.html",target:"_blank",rel:"noopener noreferrer"},kn=o(`<p><code>SystemProperties</code> 是 Android 提供的一个能够在运行期间读取 <code>build.prop</code> 内容的工具，但是这个功能是不面向开发者开放的。</p><p>于是为了能够避免每次都使用反射的方式来访问 <code>SystemProperties</code>，<code>BetterAndroid</code> 镜像了 <code>SystemProperties</code> 的所有方法。</p><p>现在，你可以直接使用非反射的方式来访问 <code>SystemProperties</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 例如，获取当前系统的构建 ID</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> buildId </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SystemProperties.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;ro.build.id&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 获取当前系统的构建类型</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> buildTags </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SystemProperties.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;ro.system.build.tags&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 获取当前设备支持的 CPU ABI 列表</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> abis </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SystemProperties.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;ro.system.product.cpu.abilist&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BetterAndroid</code> 还为其提供了一个扩展用法。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 判断属性键值是否存在</span></span>
<span class="line"><span style="color:#768390;">// 例如一些 ROM 中特有的键值</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isExists </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SystemProperties.</span><span style="color:#DCBDFB;">contains</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;ro.miui.ui.version.name&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function _n(Fn,xn){const e=t("ExternalLinkIcon");return p(),c("div",null,[r,s("p",null,[n("你可以 "),s("a",d,[n("点击这里"),a(e)]),n(" 查看 KDoc。")]),y,s("div",u,[m,s("p",null,[s("a",A,[n("PackageInfoFlagsWrapper"),a(e)])]),v,s("p",null,[s("a",b,[n("ApplicationInfoFlagsWrapper"),a(e)])]),D,s("p",null,[s("a",h,[n("Application → getComponentName"),a(e)])]),s("p",null,[s("a",B,[n("Application → hasPackage"),a(e)])]),s("p",null,[s("a",C,[n("Application → hasLaunchActivity"),a(e)])]),s("p",null,[s("a",g,[n("Application → getPackageInfo"),a(e)])]),s("p",null,[s("a",k,[n("Application → getPackageInfoOrNull"),a(e)])]),s("p",null,[s("a",_,[n("Application → getInstalledPackages"),a(e)])]),s("p",null,[s("a",F,[n("Application → getInstalledPackagesOrNull"),a(e)])]),s("p",null,[s("a",x,[n("Application → queryLaunchActivitiesForPackage"),a(e)])]),s("p",null,[s("a",f,[n("Application → queryLaunchActivitiesForPackageOrNull"),a(e)])]),s("p",null,[s("a",q,[n("Application → isComponentEnabled"),a(e)])]),s("p",null,[s("a",I,[n("Application → enableComponent"),a(e)])]),s("p",null,[s("a",S,[n("Application → disableComponent"),a(e)])]),s("p",null,[s("a",P,[n("Application → resetComponent"),a(e)])]),s("p",null,[s("a",M,[n("Application → versionCodeCompat"),a(e)])]),s("p",null,[s("a",O,[n("Application → primaryCpuAbi"),a(e)])]),s("p",null,[s("a",E,[n("Application → secondaryCpuAbi"),a(e)])]),s("p",null,[s("a",K,[n("Application → hasFlags"),a(e)])]),N]),w,s("div",R,[V,L,s("p",null,[n("请参考 "),s("a",T,[n("Package visibility filtering on Android"),a(e)]),n("。")])]),U,s("div",W,[H,s("p",null,[s("a",z,[n("Broadcast → registerReceiver"),a(e)])]),s("p",null,[s("a",Q,[n("Broadcast → sendBroadcast"),a(e)])]),G]),Y,s("div",Z,[j,X,s("p",null,[n("请参考 "),s("a",J,[n("Runtime-registered broadcasts receivers must specify export behavior"),a(e)]),n("。")])]),$,s("div",ss,[ns,s("p",null,[s("a",es,[n("ClipDataItemBuilder"),a(e)])]),as,s("p",null,[s("a",os,[n("Clipboard → clipboardManager"),a(e)])]),s("p",null,[s("a",ls,[n("Clipboard → copy"),a(e)])]),s("p",null,[s("a",ts,[n("Clipboard → listOfItems"),a(e)])]),s("p",null,[s("a",ps,[n("Clipboard → ClipData"),a(e)])]),cs]),is,s("div",rs,[ds,ys,s("p",null,[n("请参考 "),s("a",us,[n("Limited access to clipboard data"),a(e)]),n("。")])]),ms,s("div",As,[vs,s("p",null,[s("a",bs,[n("Intent → getSerializableExtraCompat"),a(e)])]),s("p",null,[s("a",Ds,[n("Intent → getSerializableCompat"),a(e)])]),s("p",null,[s("a",hs,[n("Intent → getParcelableExtraCompat"),a(e)])]),s("p",null,[s("a",Bs,[n("Intent → getParcelableCompat"),a(e)])]),Cs]),gs,s("div",ks,[_s,s("p",null,[s("a",Fs,[n("Service → startService"),a(e)])]),s("p",null,[s("a",xs,[n("Service → startForegroundService"),a(e)])]),s("p",null,[s("a",fs,[n("Service → startServiceOrElse"),a(e)])]),s("p",null,[s("a",qs,[n("Service → startForegroundServiceOrElse"),a(e)])]),Is]),Ss,s("div",Ps,[Ms,Os,s("p",null,[n("请参考 "),s("a",Es,[n("Background Execution Limits"),a(e)]),n("。")])]),Ks,s("div",Ns,[ws,s("p",null,[s("a",Rs,[n("SystemVersion"),a(e)])]),Vs,s("p",null,[s("a",Ls,[n("SystemKind"),a(e)])]),Ts,s("p",null,[s("a",Us,[n("SystemProperties"),a(e)])]),Ws]),Hs,s("p",null,[n("以下是目前收集的系统种类的常量对照表，如果你有更多系统种类的特征，欢迎 PR 或前往 "),s("a",zs,[n("GitHub Issues"),a(e)]),n(" 向我们提出建议。")]),s("table",null,[Qs,s("tbody",null,[Gs,s("tr",null,[Ys,s("td",null,[s("a",Zs,[n("HarmonyOS"),a(e)]),n(" (基于 AOSP)")])]),s("tr",null,[js,s("td",null,[s("a",Xs,[n("EMUI"),a(e)])])]),s("tr",null,[Js,s("td",null,[s("a",$s,[n("MIUI"),a(e)])])]),s("tr",null,[sn,s("td",null,[s("a",nn,[n("HyperOS"),a(e)])])]),s("tr",null,[en,s("td",null,[s("a",an,[n("ColorOS"),a(e)])])]),s("tr",null,[on,s("td",null,[s("a",ln,[n("FuntouchOS"),a(e)])])]),s("tr",null,[tn,s("td",null,[s("a",pn,[n("OriginOS"),a(e)])])]),s("tr",null,[cn,s("td",null,[s("a",rn,[n("Flyme"),a(e)])])]),s("tr",null,[dn,s("td",null,[s("a",yn,[n("OneUI"),a(e)])])]),s("tr",null,[un,s("td",null,[s("a",mn,[n("ZUI"),a(e)])])]),s("tr",null,[An,s("td",null,[s("a",vn,[n("RedMagicOS"),a(e)])])]),s("tr",null,[bn,s("td",null,[s("a",Dn,[n("NubiaUI"),a(e)])])]),s("tr",null,[hn,s("td",null,[s("a",Bn,[n("RogUI"),a(e)])])]),s("tr",null,[Cn,s("td",null,[s("a",gn,[n("VisionOS"),a(e)])])])])]),kn])}const qn=l(i,[["render",_n],["__file","system-extension.html.vue"]]);export{qn as default};
